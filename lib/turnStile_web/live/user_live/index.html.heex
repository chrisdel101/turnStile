<%= if @live_action in [:index] do %>
  <%= if TurnStile.Utils.is_list_greater_that_1?( @user_registration_messages) do %>
      <h2>Notification</h2>
  <% end %>
  <%= for message <- @user_registration_messages do %>
  <% IO.inspect(assigns) %>
   <TurnStileWeb.PopUpItem.render
        module={TurnStileWeb.UserLive.TurnStileWeb.PopUpItem}
        id={TurnStileWeb.UserLive.Index.IndexUtils.extract_message_popup_index(message)}
        action={@live_action}
        popup_title={assigns[:popup_message_title]}
        popup_body={assigns[:popup_message_body]}
        popup_data={TurnStileWeb.UserLive.Index.IndexUtils.extract_message_popup_user_params(message)}
        />
    <% end %>
  <%= if TurnStile.Utils.is_list_greater_that_1?( @unmatched_SMS_users) do %>
    <h2>Notification</h2>
  <%!-- <% IO.inspect(user_tuple, label: 'XXX') %> --%>
      <TurnStileWeb.PopUpBlock.render
        module={TurnStileWeb.UserLive.TurnStileWeb.UserLive.PopUpBlock}
        current_employee={@current_employee}
        id={"unmatched_SMS_users_popup"}
        action={@live_action}
        popup_title={assigns[:popup_hero_title]}
        popup_body={assigns[:popup_hero_body]}
        popup_data={nil}
        />
    <% end %>
  <% end %>
<h1>Listing Users</h1>
<%!-- block re-renders until back to index - else child will reload --%>
  <%!-- <% IO.inspect(@unmatched_SMS_users, label: 'XXX') %> --%>

  <%!-- <%= if @toggle_popup do %>
  <% end %> --%>
  <%!-- list of possible modals opening from index --%>
  <%= if @live_action in [:new, :insert, :select] do %>
    <.modal return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}>
      <.live_component
        module={TurnStileWeb.UserLive.UpsertFormComponent}
        id={if assigns[:user] && Map.get(assigns[:user], :id) ,do: assigns[:user].id, else: :new}~
        live_action={@live_action}
        current_employee={@current_employee}
        user={assigns[:user]}
        subtitle={assigns[:subtitle]}
        page_title={@page_title}
        user_changeset={assigns[:user_changeset]}
        code={assigns[:code]}
        return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}
      />
    </.modal>
    <% end %>
    <%= if @live_action in [:alert] do %>
      <.modal return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}>
        <.live_component
          module={TurnStileWeb.AlertPanel}
          id={@user.id || :new}~
          action={@live_action}
          current_employee={@current_employee}
          user={@user}
          panel={@panel}
          page_title="Alerts"
          return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}
        />
      </.modal>
    
      <span><%= live_patch "Back", to: Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id) %></span>
    <% end %>
    <%= if @live_action in [:search, :display_existing_users] do %>
      <.modal return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}>

        <.live_component
          module={TurnStileWeb.UserLive.SearchComponent}
          id={:search}
          action={@live_action}
          current_employee={@current_employee}
          page_title={@page_title}
          return_to={Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id)}
        />
        <.live_component
          module={TurnStileWeb.UserLive.DisplayUsersList}
          users={assigns[:existing_users_found] || []}
          user_changeset={assigns[:user_changeset]}
          search_field_name={@search_field_name}
          search_field_value={@search_field_value}
          id={:display}
          live_action={@live_action}
          current_employee={@current_employee}
          page_title={@page_title}
          display_message={@display_message}
          display_instruction={@display_instruction}
          display_type={assigns[:display_type]}
          return_to={@return_to}
        />
      </.modal>
    
      <span><%= live_patch "Back", to: Routes.user_index_path(@socket, :index, @current_employee.current_organization_login_id, @current_employee.id) %></span>
    <% end %>

    <ul>
    <%= if TurnStileWeb.EmployeeAuth.has_user_add_permissions?(nil, @current_employee) do %>
      <li><%= live_patch "Add_New_User", to: Routes.user_index_path(@socket, :new, @current_employee.current_organization_login_id, @current_employee.id) %></li>

    <% end %>

     <li><%= live_patch "Search_For_User", to: Routes.user_index_path(@socket, :search, @current_employee.current_organization_login_id, @current_employee.id) %></li>

    </ul>
  <table>
    <thead>
      <tr>

        <th>Active?</th>
        <th>Status</th>
        <th>First Name</th>
        <th>Last Name</th>
        <th>Contact</th>
        <th>Health #</th>
      </tr>
    </thead>
    <tbody id="users">
      <%= for user <- @users do %>

        <tr id={"user-#{user.id}"}>
          <td><%= user.is_active? %></td>
          <td title="cancelled users remain in feed for 30 mins"><%= String.capitalize(user.user_alert_status) %></td>
          <td><%= user.first_name %></td>
          <td><%= user.last_name %></td>
          <%= if user.alert_format_set === AlertFormatTypesMap.get_alert("EMAIL") do %>
            <td><%= user.email %></td>
          <% else %>
            <td><%= user.phone %></td>
          <% end %>
          
          <td><%= user.health_card_num %></td>

          <td>
            <span>
            <%= if user.alert_format_set === AlertFormatTypesMap.get_alert("EMAIL") do %>
                <button
                  title="send initial email alert"
                  class={"btn btn-primary #{if !user.email do 'disable' end}"}
                  phx-click={:send_initial_alert} phx-value-user-id={user.id}, phx-value-alert-format={AlertFormatTypesMap.get_alert("EMAIL")}> 
                    Send Email Alert
                </button>
            <% else %>
                <button
                  title="send initial SMS alert"
                  class={"btn btn-primary #{if !user.phone do 'disable' end}"}
                  phx-click={:send_initial_alert} phx-value-user-id={user.id}, phx-value-alert-format={AlertFormatTypesMap.get_alert("SMS")}> 
                  Send SMS Alert
                </button>

            <% end %>
            </span>
              <span>
                <%= live_patch "Custom_Alert", to: Routes.organization_employee_user_alert_path(@socket, :alert, @current_employee.current_organization_login_id, @current_employee.id, user.id,  %{panel: "dispatch"}) %>
              </span>

              <span>
                <%= live_patch "Alert_History", to: Routes.organization_employee_user_alert_path(@socket, :alert, @current_employee.current_organization_login_id, @current_employee.id, user.id,  %{panel: "history"}) %>
              </span>
          </td>

          <td>
            <span><%= live_redirect "Show", to: Routes.user_show_path(@socket, :show, @current_employee.current_organization_login_id, @current_employee.id, user) %></span>
          </td>

          <%= if TurnStileWeb.EmployeeAuth.has_user_delete_permissions?(@socket, @current_employee) do %>
          <td>
            <span><%= link "Delete", to: "#", phx_click: "delete", phx_value_id: user.id, data: [confirm: "Are you sure?"] %></span>
          </td>
          <% end %>
          <%= if TurnStileWeb.EmployeeAuth.has_user_remove_permissions?(@socket, @current_employee) do %>
          <td>
            <span><%= link "Remove", to: "#", phx_click: "remove", phx_value_id: user.id, data: [confirm: "Deactivate and remove?"] %></span>
          </td>
          <% end %>
        </tr>
      <% end %>
    </tbody>
  </table>
